django-admin startproject myworld
py manage.py runserver(run)
py manage.py startapp members


#conect with mysql#
1. python -m pip install mysql-connector-python
2. --edit at setting--------------
		DATABASES = {
    'default': {
        'ENGINE': 'mysql.connector.django',
        'NAME': 'django_Ahey',
        'USER': 'root',
        'PASSWORD':'qL7uxgdjbo',
        'HOST':'127.0.0.1',
        'PORT':'3306'
    			}
				}		
--------------------------------

3. python manage.py migrate 
//////////////
4. --edit at models(books)----------
		from turtle import title
		from django.db import models

		# Create your models here.

		class Book(models.Model):
    			title = models.CharField(max_length=60)
    			price = models.IntegerField()
    			is_premium = models.BooleanField(null=False)
    			pmt_end = models.DateTimeField(null=False)

----------------------------
5. python manage.py makemigrations books(name folder)   
6. python manage.py migrate


#เล่น model#( py manage.py shell)

-----Book-------
1. create
>>> from books.models import Book
>>> book1 = Book()
>>> book1.title = 'Atomic Habits'
>>> book1.price = 28
>>> book1.save()

2. edit
>>> book1.special_price = 25
>>> book1.description = 'บทพิสูจน์ที่เปลี่ยนชีวิตคุณให้ดีขึ้นได้อย่างถาวร จากนักเขียนหนังสือขายดีของ New York Times ผู้เชี่ยวชาญระดับโลกด้านการสร้างนิสัย'
>>> from datetime import datetime
>>> from zoneinfo import ZoneInfo
>>> date1 = datetime(2023,2,14,tzinfo = ZoneInfo('Asia/Bangkok')) 
>>> book1.pmt_end = date1                                        
>>> book1.save()  

3. Delete
>>> from books.models import Book
>>> book2 = Book()
>>> book2.title = 'Atomic Habits' 
>>> book2.price = 28 
>>> book2.save()     
>>> book2.delete()  
(1, {'books.Book': 1})   

4.Read
  - เพิ่่มข้อมูลอีก 1 ชุด
 4.1 ทั้งหมด
	>>> all_book = Book.objects.all() 
	>>> all_book
		<QuerySet [<Book: Book object (1)>, <Book: Book object (3)>]>
 4.2 only พรีเมียม
	>>> premium = Book.objects.filter(is_premium=True)   
	>>> premium                                        
		<QuerySet [<Book: Book object (3)>]>
 4.3 sort by premium
    >>> all_premium_sort = Book.objects.all().order_by('-is_premium') ##('is_premium' จะเรียงแบบ Reverse )
	>>> all_premium_sort
		<QuerySet [<Book: Book object (3)>, <Book: Book object (1)>]>
 4.4  pagination
	>>> all_page_books = Book.objects.all()[0:1] 
	>>> all_page_books
		<QuerySet [<Book: Book object (1)>]>
	>>> all_page_books = Book.objects.all()[0:2] 
	>>> all_page_books
		<QuerySet [<Book: Book object (1)>, <Book: Book object (3)>]>
	>>> all_page_books = Book.objects.all()[1:2] 
	>>> all_page_books
		<QuerySet [<Book: Book object (3)>]>
 4.5 Read one book
 	>>> one_book = Book.objects.get(id=1)
	>>> one_book.title
		'Atomic Habits'
-----EndBook-------

-----members-----
1. create 
	1.1 one to one 
		book = models.OneToOneField('books.Book',on_delete=models.SET_NULL,null=True) #(models in members)
	1.2 many to one
		book = models.ForeignKey('books.Book',on_delete=models.SET_NULL,null=True)
	1.3 many to many
		book_set = models.ManyToManyField('books.Book') #many to many
2. Relation
	2.1 สร้างข้อมูลทั้งสองฝั่งให้เรียบร้อย
	2.2 เชื่อมข้อมูล
	
	>>> from books.models import Book
	>>> from members.models import Member
	>>> selected_book = Book.objects.filter(id__in=[1,3])
	>>> selected_book
		<QuerySet [<Book: Book object (1)>, <Book: Book object (3)>]>
	>>> mem1.book_set.set(selected_book) (Done.)

3. update
	>>> selected_book2 = Book.objects.filter(id__in=[3])
	>>> mem1.book_set.set(selected_book2) 

4. delete
	>>> mem3.delete()

5. read one with Relation
	>>> one_book = Book.objects.get(id=3)
	>>> one_book.title
		'Think again'
	>>> book_mem = one_book.members_set.all() 
	>>> book_mem
		<QuerySet [<Members: Members object (1)>, <Members: Members object (2)>]>

6. read all with Relation
	>>> all_mem = Members.objects.all()
	>>> all_mem[0]
		<Members: Members object (1)>
	>>> mem1_books = all_mem[0].book_set.all()
	>>> mem1_books
		<QuerySet [<Book: Book object (1)>, <Book: Book object (3)>]>
	>>> mem2_books = all_mem[1].book_set.all()
	>>> mem2_books
		<QuerySet [<Book: Book object (1)>, <Book: Book object (3)>]>